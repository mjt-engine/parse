{"version":3,"file":"createSseParser.js","sourceRoot":"","sources":["../src/createSseParser.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iCAAiC,EAAE,MAAM,qCAAqC,CAAC;AAExF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAI,EACjC,QAAQ,EACR,MAAM,EACN,MAAM,GAAG,GAAG,EAAE,GAAE,CAAC,EACjB,OAAO,GAAG,GAAG,EAAE,GAAE,CAAC,EAClB,UAAU,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,IAAS,EAChC,MAAM,GAQP,EAAiB,EAAE;IAClB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC;YACH,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,OAAO,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACrC,MAAM,EAAE,KAAK,EAAE,SAAS,GAAG,EAAE,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBAE5D,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,EAAE,CAAC;oBACxB,SAAS;gBACX,CAAC;gBACD,IAAI,IAAI,EAAE,CAAC;oBACT,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACvB,MAAM,GAAG,GAAG,MAAM,iCAAiC,CAAC;4BAClD,KAAK,EAAE,OAAO,GAAG,SAAS;4BAC1B,QAAQ;4BACR,IAAI;4BACJ,MAAM;4BACN,UAAU;yBACX,CAAC,CAAC;oBACL,CAAC;oBACD,MAAM,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;oBAChC,MAAM,EAAE,CAAC;oBACT,MAAM,CAAC,MAAM,EAAE,CAAC;oBAChB,QAAQ,GAAG,IAAI,CAAC;oBAChB,MAAM;gBACR,CAAC;gBACD,OAAO,GAAG,MAAM,iCAAiC,CAAC;oBAChD,KAAK,EAAE,OAAO,GAAG,SAAS;oBAC1B,QAAQ;oBACR,IAAI;oBACJ,MAAM;oBACN,UAAU;iBACX,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,CAAC;YACf,MAAM,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,EAAE,CAAC,CAAC,oCAAoC;YAChD,CAAC;YACD,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC1B,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import type { SseConsumer } from \"./SseConsumer\";\nimport { processSsePartialUntilNoMoreStops } from \"./processSsePartialUntilNoMoreStops\";\n\nexport const createSseParser = <T>({\n  consumer,\n  reader,\n  onDone = () => {},\n  onError = () => {},\n  dataParser = (data) => data as T,\n  signal,\n}: {\n  signal?: AbortSignal;\n  onDone?: () => void;\n  onError?: (err: unknown) => void;\n  reader: ReadableStreamDefaultReader<string>;\n  dataParser?: (data: string) => T | undefined;\n  consumer: SseConsumer<T>;\n}): Promise<void> => {\n  return new Promise(async (resolve, reject) => {\n    let finished = false;\n    try {\n      let partial = \"\";\n      while (!signal?.aborted && !finished) {\n        const { value: readValue = \"\", done } = await reader.read();\n\n        if (!readValue && !done) {\n          continue;\n        }\n        if (done) {\n          if (partial.length > 0) {\n            const foo = await processSsePartialUntilNoMoreStops({\n              input: partial + readValue,\n              consumer,\n              done,\n              reader,\n              dataParser,\n            });\n          }\n          await consumer(undefined, done);\n          onDone();\n          reader.cancel();\n          finished = true;\n          break;\n        }\n        partial = await processSsePartialUntilNoMoreStops({\n          input: partial + readValue,\n          consumer,\n          done,\n          reader,\n          dataParser,\n        });\n      }\n    } catch (error) {\n      onError(error);\n      reject(error);\n    } finally {\n      reader.cancel();\n      if (!finished) {\n        onDone(); // make sure onDone is always called\n      }\n      consumer(undefined, true);\n      resolve();\n    }\n  });\n};\n"]}